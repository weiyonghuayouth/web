★模块

定义模块 两个参数  1 模块名 2 依赖列表 

angular.module('myapp',[]);(相当于angular模块的setter方法，用来定义模块的)

angular.module('myapp') 相当于angularjs模块的getter方法，用来获取对模块的引用

ng-app="myapp" 视图中绑定

★作用域  视图和控制器之间的胶水

$rootscope 是所有的$scope 对象的最上层 
$scope不负责处理和操作数据，是视图和html之间的桥梁，视图和控制器的胶水

<div ng-app="myApp">
	<div ng-controller="MyController">
		<h1>Hello {{ name }}</h1>
	</div>
</div>
angular.module("myApp", [])
	.controller('MyController',
	function($scope) {
	$scope.name = "Ari";
});

★控制器 

就是个函数 
与其他js 框架的区别，控制器不适合用来执行DOM操作，格式化或数据操作

angular.module('myapp',[]).controller('mycontroller',function($scope){
$scope.name="wyh"
})

ng-controller="mycontroller"

臃肿的控制器：
angular.module('myApp', [])
.controller('MyController', function($scope) {
   $scope.shouldShowLogin = true;
   $scope.showLogin = function () {
     $scope.shouldShowLogin = !$scope.shouldShowLogin;
    };
    $scope.clickButton = function() {
      $('#btn span').html('Clicked');
    };
    $scope.onLogin = function(user) {
       $http({
       method: 'POST',
       url: '/login',
       data: {
      user: user
      }
   }).success(function(data) {
           // user
   });
  };
});
简洁的控制器：
angular.module('myApp', [])
.controller('MyController', function($scope,UserSrv) {
	// 内容可以被指令控制
	$scope.onLogin = function(user) {
	   UserSrv.runLogin(user);
	};
});

★表达式

{{name}}

所有表达式在其作用域内部执行，并有访问本地$scope的权限
发生了错误不会抛出异常
不允许使用任何流程控制功能 如if/eles
可以接受过滤器和过滤器链

★ng-model 指令绑定了 HTML 表单元素到 scope 变量中。

★过滤器

★表单验证
